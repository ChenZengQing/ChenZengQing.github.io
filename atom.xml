<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>搬砖之路</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zengqing.top/"/>
  <updated>2018-10-01T14:02:29.501Z</updated>
  <id>http://zengqing.top/</id>
  
  <author>
    <name>陈增庆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web 前端环境搭建 Vue版</title>
    <link href="http://zengqing.top/2018/10/01/Web%20%E5%89%8D%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%20Vue%E7%89%88/"/>
    <id>http://zengqing.top/2018/10/01/Web 前端环境搭建 Vue版/</id>
    <published>2018-10-01T14:01:22.980Z</published>
    <updated>2018-10-01T14:02:29.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web-前端环境搭建-Vue版"><a href="#Web-前端环境搭建-Vue版" class="headerlink" title="Web 前端环境搭建 Vue版"></a>Web 前端环境搭建 Vue版</h1><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>点击下载 <a href="https://nodejs.org/dist/v8.11.3/node-v8.11.3-x64.msi" target="_blank" rel="noopener">Node.js v8.11.3</a>，更多版本可登录 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js 官网</a> 查看下载。</p><p>下载结束后，点击安装，一路 <code>Next</code>。</p><blockquote><p>注：部分浏览器可能提示威胁，不用管他，直接点保存</p></blockquote><p>安装完成后可打开 <code>cmd</code> 工具键入 <code>node -v</code> 来检测是否安装成功，若出现版本信息即表示安装成功，界面如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\czq&gt;node -v</span><br><span class="line">v8.11.3</span><br><span class="line"></span><br><span class="line">C:\Users\czq&gt;</span><br></pre></td></tr></table></figure><p>若未出现此界面，先不要着急，如果确认安装已经成功去检查一下环境变量 <code>Path</code> 是否添加，若未添加，手动添加即可，添加完成后即可重复以上步骤检测是否安装成功。</p><blockquote><p>如何打开环境变量不多描述，不会的同学请自行百度。</p></blockquote><h2 id="Npm"><a href="#Npm" class="headerlink" title="Npm"></a>Npm</h2><p>由于新版的 <code>Node.js</code> 已经集成了 <code>npm</code>，所以之前安装 <code>Node.js</code> 时 <code>npm</code> 也一并安装好了，<br>可以通过 <code>cmd</code> 输入 <code>npm -v</code> 来测试是否成功安装</p><p>升级 npm:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h2 id="Nrm"><a href="#Nrm" class="headerlink" title="Nrm"></a>Nrm</h2><p><code>nrm</code> (npm registry manager )是 <code>npm</code> 的镜像源管理工具，有时候国外资源太慢，那么我们可以用这个来切换镜像源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure><p>安装完成后即可直接使用，通过 <code>nrm ls</code> 命令显示出所有可用的源列表， 通过 <code>nrm use taobao</code> 切换至国内淘宝源。</p><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><p>安装 <a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">Vue Devtools</a></p><p>安装 <code>Vue CLI</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p><a href="https://cn.vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">Vue 环境搭建参考文档</a></p><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><p>凭个人喜好 <code>Webstrom</code>、<code>Sublime</code>、<code>Atom</code>、<code>Visual Studios Code</code> 等都可以。</p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>点击下载 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git</a> 并安装，继续一路 <code>Next</code> 。</p><blockquote><p>注：环境变量记得添加。</p></blockquote><p>点击下载 <a href="https://tortoisegit.org/download/" target="_blank" rel="noopener">TortoiseGit</a> 并安装，同样的一路下一步。</p><blockquote><p>此工具亦可换成 <code>SourceTree</code></p></blockquote><h1 id="Vue-学习笔记-二-–-使用-VueCli-3"><a href="#Vue-学习笔记-二-–-使用-VueCli-3" class="headerlink" title="Vue 学习笔记 (二) – 使用 VueCli 3"></a>Vue 学习笔记 (二) – 使用 VueCli 3</h1><p>前面的文章已经简单介绍过了 <code>Vue Cli 3</code> 的新版本特性，下面我们就亲自上手感受一下我们新版本的脚手架工具。</p><p>先从项目搭建开始。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>打开我们的命令行工具，输入下面的命令创建项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure><blockquote><p>身为一名程序员，当然要从 <code>hello-world</code> 开始写喽。</p></blockquote><p>此处要注意 <a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create" target="_blank" rel="noopener">官方文档</a> 上面这样说：</p><blockquote><p>如果你在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作。你必须通过 winpty vue.cmd create hello-world 启动这个命令。</p></blockquote><p>当然如果你的命令并没有出错的话完全可以忽略这点。</p><h3 id="创建项目命令选项"><a href="#创建项目命令选项" class="headerlink" title="创建项目命令选项"></a>创建项目命令选项</h3><p>言归正传，输入上面的命令回车后应该是下面这样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.0.1</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">❯ default-project (vue-router, sass, babel) </span><br><span class="line">  default (babel, eslint) </span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure><p>上面的第一条，也就是 <code>default-project</code> 这一个选项在你第一次创建项目的时候是并不会出现的，只有你第一次创建完成项目后回提示你保存为默认配置模板，下次新建项目的时候就可以使用你选用的配置快速新建项目了，不需要再重新选择配置项目了。</p><p>废话有点多，我们继续介绍这里显示的选项。</p><p>这里的第二条选项便是 <code>vue cli 3</code> 默认的项目模板，包含 <code>babel</code> 和 <code>eslint</code>。</p><p>第三条选项便是自主选择你项目所需的配置。</p><p>这里由于默认模板没有啥展示的必要所以我们便选择手动配置。</p><h3 id="选取项目配置"><a href="#选取项目配置" class="headerlink" title="选取项目配置"></a>选取项目配置</h3><p>选择第三个选项后是这个样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.0.1</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to t</span><br><span class="line">oggle all, &lt;i&gt; to invert selection)</span><br><span class="line">❯◉ Babel</span><br><span class="line"> ◯ TypeScript</span><br><span class="line"> ◯ Progressive Web App (PWA) Support</span><br><span class="line"> ◯ Router</span><br><span class="line"> ◯ Vuex</span><br><span class="line"> ◯ CSS Pre-processors</span><br><span class="line"> ◉ Linter / Formatter</span><br><span class="line"> ◯ Unit Testing</span><br><span class="line"> ◯ E2E Testing</span><br></pre></td></tr></table></figure><p>这里我们可以选择我们需要的配置选项，选择完成后回车进入下一步。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.0.1</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, CSS Pre-processors</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback </span><br><span class="line">in production) (Y/n)</span><br></pre></td></tr></table></figure><p>上面我选择添加了 <code>Router</code> 所以这里会问我需不需要使用 <code>history</code> 模式，选择是然后进行下一步，在这里需要注意的是当最后一步的时候会提示你要不要保存该配置为模板，选择是后自定义一个名字，以后就可以使用这一套配置为默认模板快速创建项目了，就是我前面的第一条默认配置选项。</p><p>如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.0.1</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, CSS Pre-processors</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback </span><br><span class="line">in production) Yes</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported </span><br><span class="line">by default): SCSS/SASS</span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In packag</span><br><span class="line">e.json</span><br><span class="line">? Save this as a preset for future projects? (y/N)</span><br></pre></td></tr></table></figure><p>然后进入项目目录，启动项目就可以了。浏览器访问 <a href="http://localhost:8080/" target="_blank" rel="noopener">hello-world</a>，至此大功告成。</p><p>后面文章会讲解如何修改 <code>Vue Cli 3</code> 项目基础配置。</p><p>更多文章可查看 <a href="http://zengqing.top">我的博客</a></p>]]></content>
    
    <summary type="html">
    
      伟大的工作，并不是用力量而是用耐心去完成的。
    
    </summary>
    
      <category term="原创" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="前端" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
      <category term="Vue" scheme="http://zengqing.top/tags/Vue/"/>
    
      <category term="Vue Cli 3" scheme="http://zengqing.top/tags/Vue-Cli-3/"/>
    
  </entry>
  
  <entry>
    <title>Vue 学习笔记 (二) -- 使用 VueCli 3</title>
    <link href="http://zengqing.top/2018/10/01/Vue%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20(%E4%BA%8C)%20--%20%E4%BD%BF%E7%94%A8%20VueCli%203/"/>
    <id>http://zengqing.top/2018/10/01/Vue 学习笔记 (二) -- 使用 VueCli 3/</id>
    <published>2018-10-01T14:00:12.875Z</published>
    <updated>2018-10-01T14:01:01.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-学习笔记-二-–-使用-VueCli-3"><a href="#Vue-学习笔记-二-–-使用-VueCli-3" class="headerlink" title="Vue 学习笔记 (二) – 使用 VueCli 3"></a>Vue 学习笔记 (二) – 使用 VueCli 3</h1><p>前面的文章已经简单介绍过了 <code>Vue Cli 3</code> 的新版本特性，下面我们就亲自上手感受一下我们新版本的脚手架工具。</p><p>先从项目搭建开始。</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>打开我们的命令行工具，输入下面的命令创建项目。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br></pre></td></tr></table></figure><blockquote><p>身为一名程序员，当然要从 <code>hello-world</code> 开始写喽。</p></blockquote><p>此处要注意 <a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create" target="_blank" rel="noopener">官方文档</a> 上面这样说：</p><blockquote><p>如果你在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作。你必须通过 winpty vue.cmd create hello-world 启动这个命令。</p></blockquote><p>当然如果你的命令并没有出错的话完全可以忽略这点。</p><h3 id="创建项目命令选项"><a href="#创建项目命令选项" class="headerlink" title="创建项目命令选项"></a>创建项目命令选项</h3><p>言归正传，输入上面的命令回车后应该是下面这样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.0.1</span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">❯ default-project (vue-router, sass, babel) </span><br><span class="line">  default (babel, eslint) </span><br><span class="line">  Manually select features</span><br></pre></td></tr></table></figure><p>上面的第一条，也就是 <code>default-project</code> 这一个选项在你第一次创建项目的时候是并不会出现的，只有你第一次创建完成项目后回提示你保存为默认配置模板，下次新建项目的时候就可以使用你选用的配置快速新建项目了，不需要再重新选择配置项目了。</p><p>废话有点多，我们继续介绍这里显示的选项。</p><p>这里的第二条选项便是 <code>vue cli 3</code> 默认的项目模板，包含 <code>babel</code> 和 <code>eslint</code>。</p><p>第三条选项便是自主选择你项目所需的配置。</p><p>这里由于默认模板没有啥展示的必要所以我们便选择手动配置。</p><h3 id="选取项目配置"><a href="#选取项目配置" class="headerlink" title="选取项目配置"></a>选取项目配置</h3><p>选择第三个选项后是这个样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.0.1</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to t</span><br><span class="line">oggle all, &lt;i&gt; to invert selection)</span><br><span class="line">❯◉ Babel</span><br><span class="line"> ◯ TypeScript</span><br><span class="line"> ◯ Progressive Web App (PWA) Support</span><br><span class="line"> ◯ Router</span><br><span class="line"> ◯ Vuex</span><br><span class="line"> ◯ CSS Pre-processors</span><br><span class="line"> ◉ Linter / Formatter</span><br><span class="line"> ◯ Unit Testing</span><br><span class="line"> ◯ E2E Testing</span><br></pre></td></tr></table></figure><p>这里我们可以选择我们需要的配置选项，选择完成后回车进入下一步。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.0.1</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, CSS Pre-processors</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback </span><br><span class="line">in production) (Y/n)</span><br></pre></td></tr></table></figure><p>上面我选择添加了 <code>Router</code> 所以这里会问我需不需要使用 <code>history</code> 模式，选择是然后进行下一步，在这里需要注意的是当最后一步的时候会提示你要不要保存该配置为模板，选择是后自定义一个名字，以后就可以使用这一套配置为默认模板快速创建项目了，就是我前面的第一条默认配置选项。</p><p>如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Vue CLI v3.0.1</span><br><span class="line">? Please pick a preset: Manually select features</span><br><span class="line">? Check the features needed for your project: Babel, Router, CSS Pre-processors</span><br><span class="line">? Use history mode for router? (Requires proper server setup for index fallback </span><br><span class="line">in production) Yes</span><br><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported </span><br><span class="line">by default): SCSS/SASS</span><br><span class="line">? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In packag</span><br><span class="line">e.json</span><br><span class="line">? Save this as a preset for future projects? (y/N)</span><br></pre></td></tr></table></figure><p>然后进入项目目录，启动项目就可以了。浏览器访问 <a href="http://localhost:8080/" target="_blank" rel="noopener">hello-world</a>，至此大功告成。</p><p>后面文章会讲解如何修改 <code>Vue Cli 3</code> 项目基础配置。</p><p>更多文章可查看 <a href="http://zengqing.top">我的博客</a></p>]]></content>
    
    <summary type="html">
    
      伟大的工作，并不是用力量而是用耐心去完成的。
    
    </summary>
    
      <category term="原创" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Vue" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/Vue/"/>
    
    
      <category term="Vue" scheme="http://zengqing.top/tags/Vue/"/>
    
      <category term="Vue Cli 3" scheme="http://zengqing.top/tags/Vue-Cli-3/"/>
    
  </entry>
  
  <entry>
    <title>Vue 学习笔记 (一) -- 初识 VueCli 3</title>
    <link href="http://zengqing.top/2018/10/01/Vue%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20(%E4%B8%80)%20--%20%E5%88%9D%E8%AF%86%20VueCli%203/"/>
    <id>http://zengqing.top/2018/10/01/Vue 学习笔记 (一) -- 初识 VueCli 3/</id>
    <published>2018-10-01T13:58:44.097Z</published>
    <updated>2018-10-01T14:00:11.839Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue-学习笔记-一-–-初识-VueCli-3"><a href="#Vue-学习笔记-一-–-初识-VueCli-3" class="headerlink" title="Vue 学习笔记 (一) – 初识 VueCli 3"></a>Vue 学习笔记 (一) – 初识 VueCli 3</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>接触 <code>Vue</code> 已经有一段时间了，之前做项目都是套用自己之前配置好的项目模板，最近突发奇想想要再重新配置一下项目，然而。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">zengqingdeMacBook-Pro:Vue zengqing$ vue init webpack hello-world</span><br><span class="line"></span><br><span class="line">  Command vue init requires a global addon to be installed.</span><br><span class="line">  Please run npm install -g @vue/cli-init and try again.</span><br><span class="line"></span><br><span class="line">zengqingdeMacBook-Pro:Vue zengqing$</span><br></pre></td></tr></table></figure><p>之前的 <code>vue init</code> 创建命令不能用了有木有，然后想到之前更新了一波脚手架，然后赶紧翻看一下 <a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">Vue Cli 官方文档</a> 然后发现画风已经是变成这个样子的了</p><p><img src="https://upload-images.jianshu.io/upload_images/2389712-e8d86fca9d6e4667.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>原来已经升级到了 <code>3.xx</code> 版本的了，那么我们就来学习一下 <code>Vue Cli 3</code> 的新东西吧。</p><h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><p>整理收集了一些 <code>Vue Cli 3</code> 的新特性，总结如下：</p><ul><li>使用命令的变化</li><li>项目结构变化</li><li>项目配置选项的变化</li><li>支持更多新功能</li></ul><blockquote><p>以上纯属个人观点，仅供参考。</p></blockquote><h3 id="使用命令的变化"><a href="#使用命令的变化" class="headerlink" title="使用命令的变化"></a>使用命令的变化</h3><p>该方面主要体现在创建项目上面，就像刚开始说的那样 <code>vue init webpack hello-world</code> 已经替换为 <code>vue create hello-world</code>。</p><blockquote><p>官方文档上说 <code>Vue CLI 2</code> 是被 <code>Vue CLI 3</code> 覆盖的。如果你仍然需要使用旧版本的 <code>vue init</code> 功能还是可以实现的，只需要使用以下命令：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line"># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure><p>具体创建项目命令的介绍会放在下一篇文章再聊，此处仅做介绍</p><h3 id="项目结构变化"><a href="#项目结构变化" class="headerlink" title="项目结构变化"></a>项目结构变化</h3><p>先上 <code>2.x</code> 版本项目结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── build</span><br><span class="line">│   ├── build-preview.js</span><br><span class="line">│   ├── build.js</span><br><span class="line">│   ├── check-versions.js</span><br><span class="line">│   ├── logo.png</span><br><span class="line">│   ├── utils.js</span><br><span class="line">│   ├── vue-loader.conf.js</span><br><span class="line">│   ├── webpack.base.conf.js</span><br><span class="line">│   ├── webpack.dev.conf.js</span><br><span class="line">│   ├── webpack.prev.conf.js</span><br><span class="line">│   └── webpack.prod.conf.js</span><br><span class="line">├── config</span><br><span class="line">│   ├── dev.env.js</span><br><span class="line">│   ├── index.js</span><br><span class="line">│   ├── preview.env.js</span><br><span class="line">│   └── prod.env.js</span><br><span class="line">├── index.html</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── src</span><br><span class="line">│   ├── App.vue</span><br><span class="line">│   ├── assets</span><br><span class="line">│   ├── components</span><br><span class="line">│   ├── main.js</span><br><span class="line">│   ├── router</span><br><span class="line">│   ├── style</span><br><span class="line">│   └── utils</span><br><span class="line">└── static</span><br><span class="line">    └── background.mp3</span><br></pre></td></tr></table></figure><p>下面是新版本脚手架生成的项目结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── babel.config.js</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico</span><br><span class="line">│   └── index.html</span><br><span class="line">└── src</span><br><span class="line">    ├── App.vue</span><br><span class="line">    ├── assets</span><br><span class="line">    ├── components</span><br><span class="line">    ├── main.js</span><br><span class="line">    ├── router.js</span><br><span class="line">    └── views</span><br></pre></td></tr></table></figure><p>可以看出新版本的脚手架工具生成的项目是极其的简洁了。</p><ul><li>移除了配置文件目录，<code>config</code> 和 <code>build</code> 文件夹。</li><li>移除了 <code>static</code> 文件夹，新增 <code>public</code> 文件夹，并且 <code>index.html</code> 移动到 <code>public</code> 中。<br>在 <code>src</code> 文件夹中新增了 <code>views</code> 文件夹，用于分类 视图组件 和 公共组件。</li></ul><h3 id="项目配置选项的变化"><a href="#项目配置选项的变化" class="headerlink" title="项目配置选项的变化"></a>项目配置选项的变化</h3><p>想必大家都知道在 <code>2.0</code> 版本的时候，要修改项目配置可以在 <code>build</code> 和 <code>config</code> 目录下进行修改，然而在 <code>3.0</code> 中这两个文件夹都已经移除了，那么新版本的配置应该在哪里设置呢？其实也很简单，只需要在项目根目录下新建一个 <code>vue.config.js</code> 文件然后在里面写项目所需配置就可以了。</p><blockquote><p>具体配置方法会在后续文章中给出</p></blockquote><h3 id="支持更多新功能"><a href="#支持更多新功能" class="headerlink" title="支持更多新功能"></a>支持更多新功能</h3><p>在新版本的脚手架中创建项目的时候可以看到新增了对 <code>TypeScript</code> 与 <code>PWA</code> 的支持</p><p>更多文章可查看 <a href="http://zengqing.top">我的博客</a></p>]]></content>
    
    <summary type="html">
    
      伟大的工作，并不是用力量而是用耐心去完成的。
    
    </summary>
    
      <category term="原创" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Vue" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/Vue/"/>
    
    
      <category term="Vue" scheme="http://zengqing.top/tags/Vue/"/>
    
      <category term="Vue Cli 3" scheme="http://zengqing.top/tags/Vue-Cli-3/"/>
    
  </entry>
  
  <entry>
    <title>Android UI美化之 shape的使用及其属性总结</title>
    <link href="http://zengqing.top/2018/09/29/Android-UI%E7%BE%8E%E5%8C%96%E4%B9%8B-shape%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%B6%E5%B1%9E%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://zengqing.top/2018/09/29/Android-UI美化之-shape的使用及其属性总结/</id>
    <published>2018-09-29T14:35:22.507Z</published>
    <updated>2018-09-29T14:35:22.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-UI美化之-shape的使用及其属性总结"><a href="#Android-UI美化之-shape的使用及其属性总结" class="headerlink" title="Android UI美化之 shape的使用及其属性总结"></a>Android UI美化之 shape的使用及其属性总结</h1><p>近期在整理项目的过程中突然发现项目中有好多未曾使用过的图片，经过对比UI设计图片并检查代码后发现在UI上的这些地方都是通过<code>drawable</code> 下面的资源文件设置的背景，于是便想起来整理一下关于此类UI美化的东西，若存在写的不好的地方还希望大家多多指导。</p><p>本系列预计共3部分，本文具体内容为 <code>shape</code> 的使用，由于另外两篇文章暂时未整理，此处便先列出文章标题，后期会对此添加链接：</p><ul><li><strong>Android UI 美化之 shape  的使用</strong></li><li><strong>Android UI 美化之 selector 的使用</strong></li><li><strong>Android UI 美化之 layer-list 的使用</strong></li></ul><hr><p>言归正传，相信大家在项目中都用过很多用 <code>shape</code> 定义的效果，大多是一些较为规则的图形，如圆形、矩形、实线虚线以及渐变色等样式，而这种地方如果要让美工再去做张图片的话未免有点小题大做的感觉，而且有时候还要考虑各种适配问题，所以这个时候使用我们的 <code>shape</code> 的话便再好不过了，下面便介绍一下关于 <code>shape</code> 的使用过程中出现的一些属性。</p><p><strong>android:shape</strong> 此属性有以下4种类型可供选择</p><ul><li><strong>rectangle</strong>：矩形( 默认)，可以画出直角矩形、圆角矩形、弧形等</li><li><strong>oval</strong>：椭圆形，用得比较多的是画正圆</li><li><strong>line</strong>：线形，可以画实线或虚线</li><li><strong>ring</strong>：环形，可以画环形边框或环形进度条</li></ul><p>（注：只有当 <code>android:shape</code> 的值设置为 <code>ring</code> 时以下4种属性才会生效）</p><p><strong>android:innerRadius</strong>：内环半径  </p><p><strong>android:innerRadiusRatio</strong>：内环半径相对于环的宽度的比例，比如环的宽度为50,比例为2.5,那么内环半径为20  </p><p><strong>android:thickness</strong>：环的厚度  </p><p><strong>android:thicknessRatio</strong>：环的厚度相对于环的宽度的比例  </p><p><strong>android:useLevel</strong> 如果当做是LevelListDrawable使用时值为true，否则为false.</p><p>上面这些便是 <code>shape</code> 标签的一些属性了,接下来的话便是我们的重点部分了,那就是使用 <code>shape</code> 做一些形状的绘制,下面便简单介绍下使用<code>shape</code> 绘制形状时的一些标签及其属性</p><p><strong>corners</strong> 定义圆角,其属性如下</p><ul><li><strong>android:radius</strong>：全部的圆角半径  </li><li><strong>android:topLeftRadius</strong>：左上角的圆角半径  </li><li><strong>android:topRightRadius</strong>：右上角的圆角半径  </li><li><strong>android:bottomLeftRadius</strong>：左下角的圆角半径  </li><li><strong>android:bottomRightRadius</strong>：右下角的圆角半径  </li></ul><p>在定义圆角的时候大家应该可以看出可以通过两种形式来进行设置,即:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;corners android:radius=&quot;15dp&quot;/&gt;</span><br><span class="line">    &lt;solid android:color=&quot;#F00&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure></p><p>与</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;corners android:bottomLeftRadius=&quot;15dp&quot;</span><br><span class="line">        android:bottomRightRadius=&quot;15dp&quot;</span><br><span class="line">        android:topLeftRadius=&quot;15dp&quot;</span><br><span class="line">        android:topRightRadius=&quot;15dp&quot;/&gt;</span><br><span class="line">    &lt;solid android:color=&quot;#F00&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure><p>上面两种的效果相同</p><p><strong>gradient</strong> 定义渐变,其属性如下</p><ul><li><strong>android:type</strong>：共有3中渐变类型，线性渐变(linear)（默认）/放射渐变(radial)/扫描式渐变(sweep)  </li><li><strong>android:angle</strong>：渐变角度，必须为45的倍数，0为从左到右，90为从上到下  </li><li><strong>android:centerX</strong>：渐变中心X的相当位置，范围为0～1  </li><li><strong>android:centerY</strong>：渐变中心Y的相当位置，范围为0～1  </li><li><strong>android:startColor</strong>：渐变开始点的颜色  </li><li><strong>android:centerColor</strong>：渐变中间点的颜色，在开始与结束点之间  </li><li><strong>android:endColor</strong>：渐变结束点的颜色  </li><li><strong>android:gradientRadius</strong>：渐变的半径，只有当渐变类型为radial时才能使用  </li><li><strong>android:useLevel</strong>：使用LevelListDrawable时就要设置为true。设为false时才有渐变效果  </li></ul><p>代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;corners android:radius=&quot;15dp&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;gradient</span><br><span class="line">        android:type=&quot;sweep&quot;</span><br><span class="line">        android:angle=&quot;90&quot;</span><br><span class="line">        android:centerX=&quot;0.2&quot;</span><br><span class="line">        android:centerY=&quot;0.2&quot;</span><br><span class="line">        android:centerColor=&quot;@color/colorAccent&quot;</span><br><span class="line">        android:startColor=&quot;@color/colorPrimary&quot;</span><br><span class="line">        android:endColor=&quot;@color/colorPrimaryDark&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;stroke android:width=&quot;1dp&quot;</span><br><span class="line">        android:color=&quot;@android:color/white&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure></p><p><strong>solid</strong> 定义填充色</p><ul><li><strong>android:color</strong>：形状内部的填充色<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;solid android:color=&quot;#F00&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>stroke</strong> 定义描边</p><ul><li><strong>android:width</strong>：描边的宽度  </li><li><strong>android:color</strong>：描边的颜色  </li><li><strong>android:dashWidth</strong>：虚线的宽度，值为0时是实线  </li><li><strong>android:dashGap</strong>：虚线的间隔  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:shape=&quot;line&quot;&gt;</span><br><span class="line">    &lt;!--实线--&gt;</span><br><span class="line">    &lt;stroke android:width=&quot;2dp&quot;</span><br><span class="line">        android:color=&quot;@android:color/holo_purple&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:shape=&quot;line&quot;&gt;</span><br><span class="line">    &lt;!--虚线--&gt;</span><br><span class="line">    &lt;stroke android:width=&quot;2dp&quot;</span><br><span class="line">        android:color=&quot;@android:color/holo_purple&quot;</span><br><span class="line">        android:dashWidth=&quot;10dp&quot;</span><br><span class="line">        android:dashGap=&quot;5dp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure><p><strong>padding</strong> 定义形状内边距</p><ul><li><strong>android:left</strong>：左边内边距</li><li><strong>android:top</strong>：上方内边距</li><li><strong>android:right</strong>：右方内边距</li><li><strong>android:bottom</strong>：下部内边距<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:shape=&quot;line&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;padding</span><br><span class="line">        android:left=&quot;2dp&quot;</span><br><span class="line">        android:top=&quot;1dp&quot;</span><br><span class="line">        android:right=&quot;2dp&quot;</span><br><span class="line">        android:bottom=&quot;1dp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure></li></ul><p><strong>size</strong> 定义形状的大小</p><ul><li><strong>android:width</strong>：宽度</li><li><strong>android:height</strong>：高度</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    android:shape=&quot;oval&quot;</span><br><span class="line">    android:useLevel=&quot;false&quot; &gt;</span><br><span class="line"></span><br><span class="line">    &lt;solid</span><br><span class="line">        android:color=&quot;#F00&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    &lt;size android:width=&quot;15dp&quot;</span><br><span class="line">        android:height=&quot;15dp&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/shape&gt;</span><br></pre></td></tr></table></figure><p>最后附上本文代码,敬请大神指导<a href="https://github.com/ChenZengQing/AndroidUIStyleTest" title="Android 的UI 美化方式" target="_blank" rel="noopener">Android 的UI 美化方式</a></p>]]></content>
    
    <summary type="html">
    
      伟大的工作，并不是用力量而是用耐心去完成的。
    
    </summary>
    
      <category term="原创" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Android" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/Android/"/>
    
    
      <category term="Android" scheme="http://zengqing.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android 多包名打包应用</title>
    <link href="http://zengqing.top/2018/09/29/Android-%E5%A4%9A%E5%8C%85%E5%90%8D%E6%89%93%E5%8C%85%E5%BA%94%E7%94%A8/"/>
    <id>http://zengqing.top/2018/09/29/Android-多包名打包应用/</id>
    <published>2018-09-29T14:35:22.507Z</published>
    <updated>2018-09-29T14:35:22.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-多包名打包应用"><a href="#Android-多包名打包应用" class="headerlink" title="Android 多包名打包应用"></a>Android 多包名打包应用</h1><p>简介：<br>公司的新需求：同一份代码打出另一个包名的apk，即包名不同、名称不同的两个apk。</p><p>我经过多方渠道发现大致有一下三种方法：</p><ul><li><strong>通过ant打多包名应用</strong></li><li><strong>建立多个与“main”同级的文件夹，修改清单文件及build.gradle以达到打多包名效果</strong></li><li><strong>通过修改build.gradle文件的applicationId达到打多包名的效果，原理与第二种方法但比较简单</strong></li></ul><p>因为是新手，对ant并不太了解，原理也不太清楚，为了赶时间所以直接选择了第二种与第三种方法，经过测试发现第三种方法要更加简单的多，所以最后直接使用了第三种方法，以下为详解。</p><hr><p>因为要修改的是build.gradle文件而该文件一经修改就要重新编译，用过史丢丢的童鞋应该都清楚等待编译完成是是件多么蛋疼的事情所以建议大家一次性修改完成以便节约开发时间。</p><p>上面已经说过该方法主要是通过修改build.gradle文件的applicationId达到打多包名的效果的，下面便粘出本人代码供大家参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">productFlavors &#123;</span><br><span class="line">      app_one &#123;</span><br><span class="line">          applicationId &quot;com.example.app1&quot;</span><br><span class="line">          manifestPlaceholders = [</span><br><span class="line">                  app_name:&quot;测试-1&quot;</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">      app_two &#123;</span><br><span class="line">          applicationId &quot;com.example.app2&quot;</span><br><span class="line">          manifestPlaceholders = [</span><br><span class="line">                  app_name:&quot;测试-2&quot;</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">      app_three &#123;</span><br><span class="line">          applicationId &quot;com.example.app3&quot;</span><br><span class="line">          manifestPlaceholders = [</span><br><span class="line">                  app_name:&quot;测试-3&quot;</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>是不是感觉这个方法很眼熟？<br>没错就是多渠道打包的地方，通过添加这段代码后需要用到gradle面板进行打包，得到app_one 通过查看包名发现它的包名为 <code>com.example.app1</code> 显示的名称也为 <code>测试-1</code>，app_two 与 app_three 效果等同，至此已经完成多包名打包，且通过同一份代码打出了不同包名、不同名称的三个应用，而需求也达到了。</p><p>可能有的朋友会问如果还需要其他的渠道包怎么办，如果有10的渠道而又要打包两个不同的应用那岂不是要写20个类似于app_one的东西，那不是要很麻烦？没错我正好也碰到了这种情况，经过多次研究测试发现并没有那么麻烦，只需设定一个默认的包名、应用名即可，废话不多说，直接贴代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">defaultConfig &#123;</span><br><span class="line">       if (PACKAGE == &quot;one&quot;) &#123;</span><br><span class="line">           applicationId &quot;com.example.app1&quot;</span><br><span class="line">           manifestPlaceholders = [</span><br><span class="line">                   app_name:&quot;测试-1&quot;</span><br><span class="line">           ]</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           applicationId &quot;com.example.app2&quot;</span><br><span class="line">           manifestPlaceholders = [</span><br><span class="line">                   app_name:&quot;测试-2&quot;</span><br><span class="line">           ]</span><br><span class="line">       &#125;</span><br><span class="line">       minSdkVersion 14</span><br><span class="line">       targetSdkVersion 23</span><br><span class="line">       versionCode 1</span><br><span class="line">       versionName &quot;1.0&quot;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   buildTypes &#123;</span><br><span class="line">       release &#123;</span><br><span class="line">           minifyEnabled false</span><br><span class="line">           proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   productFlavors &#123;</span><br><span class="line">       app_one &#123;&#125;</span><br><span class="line">       app_two &#123;&#125;</span><br><span class="line">       app_three &#123;&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>嗯，就是这样，在defaultConfig里面设置一个默认的包名与应用名就可以了。</p><p>好了，到了这一步我们就要用到另一个神奇的文件了</p><p><img src="http://img.blog.csdn.net/20161020181721926" alt="工程目录下配置文件"></p><p>看看你的工程根目录下得这个东西，没错就是它，这里我设置了一个字段“PACKAGE”，即告诉Studio我想要什么包，到这里相信大家也就明白我写的判断的目的了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PACKAGE=one</span><br></pre></td></tr></table></figure></p><p>只要通过修改这一字段为“one”，然后通过打包后就可以得到三个“测试-1”的app_one、app_two、app_three的apk文件了，同理将其修改为其他字段即可打出其他包名、应用名的应用了。<br>但是转到本人公司项目后发现这种方法竟然失灵了，即修改 properties 文件内的字段后得不到我想要的包，经过探索发现可能是与项目工程的大小有关，改完重启后就可以了。<br>当然还有另一个最重要的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    package=&quot;com.example.morepackagenametest&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup=&quot;true&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:label=&quot;$&#123;app_name&#125;&quot;</span><br><span class="line">        android:supportsRtl=&quot;true&quot;</span><br><span class="line">        android:theme=&quot;@style/AppTheme&quot;&gt;</span><br><span class="line">        &lt;activity android:name=&quot;.MainActivity&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line"></span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><p>就是这里了，即之前定义的名字赋给应用了，在这里大家要注意一下在该项目的其他 model 内的清单文件里最好不要写  <code>android：label</code> 这句了，否则会报错的，至于是什么错一眼就可以看到了，当然如果报错了有两个方法：</p><ol><li>删掉其他 model 内清单文件下<code>application</code>的 <code>label</code> 属性</li><li>通过在 <code>application</code> 下添加 <code>tools:replace=&quot;android:label&quot;</code> 属性解决</li></ol><p>好了，打完收工。期待大神的批评指导。</p><p>最后附上资源下载地址  <a href="http://download.csdn.net/detail/qq_33673284/9659262" target="_blank" rel="noopener">Android 多包名打包应用</a>  供各位参考</p>]]></content>
    
    <summary type="html">
    
      伟大的工作，并不是用力量而是用耐心去完成的。
    
    </summary>
    
      <category term="原创" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Android" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/Android/"/>
    
    
      <category term="Android" scheme="http://zengqing.top/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Atom 完美支持WePY</title>
    <link href="http://zengqing.top/2018/09/29/Atom-%E5%AE%8C%E7%BE%8E%E6%94%AF%E6%8C%81WePY/"/>
    <id>http://zengqing.top/2018/09/29/Atom-完美支持WePY/</id>
    <published>2018-09-29T14:35:22.507Z</published>
    <updated>2018-09-29T14:35:22.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Atom-完美支持WePY"><a href="#Atom-完美支持WePY" class="headerlink" title="Atom-完美支持WePY"></a>Atom-完美支持WePY</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="为何使用WePY？"><a href="#为何使用WePY？" class="headerlink" title="为何使用WePY？"></a>为何使用<code>WePY</code>？</h3><p>我们都知道开发小程序的时候有很多很多的不方便的地方，譬如：</p><ol><li>小程序的组件化支持能力太弱</li><li>小程序无法使用<code>npm</code>包,无法使用第三方组件</li><li>频繁调用<code>setData</code>及<code>setData</code>过程中页面跳闪</li><li><code>request</code>并发次数限制</li><li>创建一个页面需要管理4个对应的文件等…</li></ol><p>ps.如果你还不了解如何开发小程序，可以先看下<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/" target="_blank" rel="noopener">小程序开发简易教程</a>。</p><blockquote><p>综上，便产生了一种框架<code>WePY</code>,详见<a href="https://tencent.github.io/wepy/document.html#/?id=%e5%be%ae%e4%bf%a1%e5%b0%8f%e7%a8%8b%e5%ba%8f%e7%bb%84%e4%bb%b6%e5%8c%96%e5%bc%80%e5%8f%91%e6%a1%86%e6%9e%b6wepy%e5%ae%98%e6%96%b9%e6%96%87%e6%a1%a3" target="_blank" rel="noopener">WePY 官方文档</a>。</p></blockquote><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p><code>WePY</code>官方推荐的编辑器有</p><ul><li>Sublime</li><li>WebStorm/PhpStorm</li><li>Atom</li><li>VS Code</li><li>VIM</li></ul><p>摸索了一圈还是推荐<code>Atom</code>给大家使用，感觉对<code>WePY</code>支持要比其他几款编辑器更高。</p><hr><h3 id="Atom-插件"><a href="#Atom-插件" class="headerlink" title="Atom 插件"></a>Atom 插件</h3><p>既然选择了<code>Atom</code>，那么一些必备的插件还是需要的，这里呢就为大家精心准备了几款实用插件（主要适配于<code>WePY</code>）。</p><ul><li>atom-beautify<br>代码格式化工具，可以设置在保存时自动格式化，别提有多方便了。支持<code>html</code>，<code>css</code>，<code>javascript</code>，<code>java</code>，<code>go</code>等等，反正常见的语言基本都支持了。</li><li>atom-wrap-in-tag<br>自动修改对应的<code>HTML</code>关闭标签，挺实用的。</li><li>autocomplete-paths<br>自动补全文件路径，这个功能肯定使用嘛，完全避免了路径输入错误带来的bug。</li><li>autoclose-html<br>自动输入对应的HTML关闭标签，虽然简答但是实用。</li><li>docblockr<br>文档化注释，你懂的，团队协作规范注释必备插件。</li><li>double-tag<br>能让同时编辑<code>html</code>的开始与结束标记，如果你增加一个 HTML开始语法，它会自动跟随写出结束语法，比如键入<code>&lt;div&gt;</code>开始，自动有<code>&lt;/div&gt;</code>结束语法。</li><li>emmet<br>能够基于<code>Emmet</code>语法产生<code>HTML</code>。</li><li>language-vue<br>使编辑器支持<code>Vue</code>语法，代码高亮</li><li>file-icons<br>很简单，为不同类型的文件添加一个漂亮的小图标，颜控开发者必备。</li><li>linter<br>能够自动覆盖检查源码，产生警告和错误，帮助规范编程，基于实时代码分析。<code>HTML</code>, <code>CSS</code>, <code>SCSS</code>, <code>JavaScript</code>都有各自的<code>Linter</code>。甚至框架也有自己的<code>Linter</code>。</li><li>linter-jshint<br>帮助你编写专业的<code>js</code>代码，<code>js</code>开发者必备插件。</li><li>minimap<br>这个插件不用介绍了吧，从<code>sublime</code>开始，一直使用。从未遗忘。</li><li>activate-power-mode<br>这个插件就不用说了，酷炫的敲代码，装*党必备。</li></ul><p>安装完这些插件，你的<code>Atom</code>已经可以很愉快的支持<code>WePY</code>了，快去尝试吧。</p>]]></content>
    
    <summary type="html">
    
      伟大的工作，并不是用力量而是用耐心去完成的。
    
    </summary>
    
      <category term="原创" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="小程序" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://zengqing.top/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="WePY" scheme="http://zengqing.top/tags/WePY/"/>
    
  </entry>
  
  <entry>
    <title>Atom 插件安装慢解决方案</title>
    <link href="http://zengqing.top/2018/09/29/Atom-%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://zengqing.top/2018/09/29/Atom-插件安装慢解决方案/</id>
    <published>2018-09-29T14:35:22.507Z</published>
    <updated>2018-09-29T14:35:22.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Atom-插件安装慢解决方案"><a href="#Atom-插件安装慢解决方案" class="headerlink" title="Atom 插件安装慢解决方案"></a>Atom 插件安装慢解决方案</h1><p>对于一名前端开发者来说 <code>Atom</code> 确实是一个很不错的编辑器，使用方便、功能强大而且编写代码酷炫。对于 <code>Atom</code> 来说我感觉最重要的一个能就是插件(或者说package)，你可以在<a href="https://atom.io/packages" target="_blank" rel="noopener">这里</a> 找到很多功能强大的插件，但是在国内，Atom插件安装总是有点不稳定，下载缓慢、或者下载失败，此时你就也要尝试其他的一些方法来安装你想要的插件了。</p><blockquote><p>此文以 <code>atom-beautify</code> 插件为例,可换为你想安装的插件</p></blockquote><h2 id="apm-安装"><a href="#apm-安装" class="headerlink" title="apm 安装"></a>apm 安装</h2><p><code>apm</code> (Atom Package Manager) 是 <code>Atom</code> 的包管理工具，可以方便的管理 <code>Atom</code> 的插件。<br>首先打开你的 <code>cmd</code> ,切换到 <code>Atom</code> 的插件目录。</p><blockquote><p><code>Atom</code> 的插件目录为 <code>C:\Users\zengqing\.atom\packages</code> 注：此处 <code>zengqing</code> 更换为你的电脑用户名</p></blockquote><p>然后运行代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm install atom-beautify</span><br></pre></td></tr></table></figure><p>然后静等片刻待出现 <code>done</code> 即表示安装成功,随后就可以打开 <code>Atom</code> 使用此插件了</p><h2 id="git-安装"><a href="#git-安装" class="headerlink" title="git 安装"></a>git 安装</h2><p>使用此方式你就需要先在 <a href="https://atom.io/packages" target="_blank" rel="noopener">Atom 插件</a> 找到你需要的插件仓库地址<br>如：<a href="https://github.com/Glavin001/atom-beautify" target="_blank" rel="noopener">https://github.com/Glavin001/atom-beautify</a> 为 <code>atom-beautify</code> 的仓库地址，然后使用r如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Glavin001/atom-beautify</span><br></pre></td></tr></table></figure><p>克隆完毕后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd atom-beautify</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>命令完成后即可打开 <code>Atom</code> 使用插件了。</p><blockquote><p>注： 此方法也许进入 <code>Atom</code> 的插件目录</p></blockquote><h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><p>此处官方亦有声明，<a href="https://github.com/atom/apm#behind-a-firewall" target="_blank" rel="noopener">点击查看</a></p><h2 id="切换国内源"><a href="#切换国内源" class="headerlink" title="切换国内源"></a>切换国内源</h2><p>切换到 <code>Atom</code> 安装目录下（<code>C:\Users\zengqing\.atom</code>），编辑 <code>.atomrc</code> 文件。<br>将该文件内容改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry = https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>保存文件后可通过 <code>apm install --check</code> 命令测试是否可以正常安装，然后就可以去 <code>Atom</code><br>里正常安装了</p><blockquote><p>注：是 <code>Atom</code> 安装目录，不是插件目录；如果 <code>Atom</code> 安装目录下没有 <code>.atomrc</code> 文件就新建一个</p></blockquote>]]></content>
    
    <summary type="html">
    
      伟大的工作，并不是用力量而是用耐心去完成的。
    
    </summary>
    
      <category term="原创" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="开发工具" scheme="http://zengqing.top/catego/%E5%8E%9F%E5%88%9B/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Atom" scheme="http://zengqing.top/tags/Atom/"/>
    
  </entry>
  
</feed>
