{"pages":[{"title":"404","text":"","path":"404/index.html","date":"02-08","excerpt":""},{"title":"关于博主","text":"一名安静的编程人16年软件工程专业毕业，现主攻 Android, React, React Native, 微信小程序 方向","path":"about/index.html","date":"02-08","excerpt":""},{"title":"分类","text":"","path":"categories/index.html","date":"02-07","excerpt":""},{"title":"message","text":"","path":"message/index.html","date":"02-08","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"02-08","excerpt":""},{"title":"标签","text":"","path":"tags/index.html","date":"02-07","excerpt":""}],"posts":[{"title":"Web 前端环境搭建 Vue版","text":"Web 前端环境搭建 Vue版Node.js点击下载 Node.js v8.11.3，更多版本可登录 Node.js 官网 查看下载。 下载结束后，点击安装，一路 Next。 注：部分浏览器可能提示威胁，不用管他，直接点保存 安装完成后可打开 cmd 工具键入 node -v 来检测是否安装成功，若出现版本信息即表示安装成功，界面如下： 1234C:\\Users\\czq&gt;node -vv8.11.3C:\\Users\\czq&gt; 若未出现此界面，先不要着急，如果确认安装已经成功去检查一下环境变量 Path 是否添加，若未添加，手动添加即可，添加完成后即可重复以上步骤检测是否安装成功。 如何打开环境变量不多描述，不会的同学请自行百度。 Npm由于新版的 Node.js 已经集成了 npm，所以之前安装 Node.js 时 npm 也一并安装好了，可以通过 cmd 输入 npm -v 来测试是否成功安装 升级 npm: 1npm install npm -g Nrmnrm (npm registry manager )是 npm 的镜像源管理工具，有时候国外资源太慢，那么我们可以用这个来切换镜像源。 1npm install -g nrm 安装完成后即可直接使用，通过 nrm ls 命令显示出所有可用的源列表， 通过 nrm use taobao 切换至国内淘宝源。 Vue安装 Vue Devtools 安装 Vue CLI 1npm install -g @vue/cli Vue 环境搭建参考文档 Webpack1npm install webpack -g IDEA凭个人喜好 Webstrom、Sublime、Atom、Visual Studios Code 等都可以。 版本控制点击下载 Git 并安装，继续一路 Next 。 注：环境变量记得添加。 点击下载 TortoiseGit 并安装，同样的一路下一步。 此工具亦可换成 SourceTree Vue 学习笔记 (二) – 使用 VueCli 3前面的文章已经简单介绍过了 Vue Cli 3 的新版本特性，下面我们就亲自上手感受一下我们新版本的脚手架工具。 先从项目搭建开始。 创建项目打开我们的命令行工具，输入下面的命令创建项目。 1vue create hello-world 身为一名程序员，当然要从 hello-world 开始写喽。 此处要注意 官方文档 上面这样说： 如果你在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作。你必须通过 winpty vue.cmd create hello-world 启动这个命令。 当然如果你的命令并没有出错的话完全可以忽略这点。 创建项目命令选项言归正传，输入上面的命令回车后应该是下面这样子的： 12345Vue CLI v3.0.1? Please pick a preset: (Use arrow keys)❯ default-project (vue-router, sass, babel) default (babel, eslint) Manually select features 上面的第一条，也就是 default-project 这一个选项在你第一次创建项目的时候是并不会出现的，只有你第一次创建完成项目后回提示你保存为默认配置模板，下次新建项目的时候就可以使用你选用的配置快速新建项目了，不需要再重新选择配置项目了。 废话有点多，我们继续介绍这里显示的选项。 这里的第二条选项便是 vue cli 3 默认的项目模板，包含 babel 和 eslint。 第三条选项便是自主选择你项目所需的配置。 这里由于默认模板没有啥展示的必要所以我们便选择手动配置。 选取项目配置选择第三个选项后是这个样子的： 12345678910111213Vue CLI v3.0.1? Please pick a preset: Manually select features? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)❯◉ Babel ◯ TypeScript ◯ Progressive Web App (PWA) Support ◯ Router ◯ Vuex ◯ CSS Pre-processors ◉ Linter / Formatter ◯ Unit Testing ◯ E2E Testing 这里我们可以选择我们需要的配置选项，选择完成后回车进入下一步。 12345Vue CLI v3.0.1? Please pick a preset: Manually select features? Check the features needed for your project: Babel, Router, CSS Pre-processors? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n) 上面我选择添加了 Router 所以这里会问我需不需要使用 history 模式，选择是然后进行下一步，在这里需要注意的是当最后一步的时候会提示你要不要保存该配置为模板，选择是后自定义一个名字，以后就可以使用这一套配置为默认模板快速创建项目了，就是我前面的第一条默认配置选项。 如下： 12345678910Vue CLI v3.0.1? Please pick a preset: Manually select features? Check the features needed for your project: Babel, Router, CSS Pre-processors? Use history mode for router? (Requires proper server setup for index fallback in production) Yes? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): SCSS/SASS? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In package.json? Save this as a preset for future projects? (y/N) 然后进入项目目录，启动项目就可以了。浏览器访问 hello-world，至此大功告成。 后面文章会讲解如何修改 Vue Cli 3 项目基础配置。 更多文章可查看 我的博客","path":"2018/10/01/Web 前端环境搭建 Vue版/","date":"10-01","excerpt":""},{"title":"Vue 学习笔记 (二) -- 使用 VueCli 3","text":"Vue 学习笔记 (二) – 使用 VueCli 3前面的文章已经简单介绍过了 Vue Cli 3 的新版本特性，下面我们就亲自上手感受一下我们新版本的脚手架工具。 先从项目搭建开始。 创建项目打开我们的命令行工具，输入下面的命令创建项目。 1vue create hello-world 身为一名程序员，当然要从 hello-world 开始写喽。 此处要注意 官方文档 上面这样说： 如果你在 Windows 上通过 minTTY 使用 Git Bash，交互提示符并不工作。你必须通过 winpty vue.cmd create hello-world 启动这个命令。 当然如果你的命令并没有出错的话完全可以忽略这点。 创建项目命令选项言归正传，输入上面的命令回车后应该是下面这样子的： 12345Vue CLI v3.0.1? Please pick a preset: (Use arrow keys)❯ default-project (vue-router, sass, babel) default (babel, eslint) Manually select features 上面的第一条，也就是 default-project 这一个选项在你第一次创建项目的时候是并不会出现的，只有你第一次创建完成项目后回提示你保存为默认配置模板，下次新建项目的时候就可以使用你选用的配置快速新建项目了，不需要再重新选择配置项目了。 废话有点多，我们继续介绍这里显示的选项。 这里的第二条选项便是 vue cli 3 默认的项目模板，包含 babel 和 eslint。 第三条选项便是自主选择你项目所需的配置。 这里由于默认模板没有啥展示的必要所以我们便选择手动配置。 选取项目配置选择第三个选项后是这个样子的： 12345678910111213Vue CLI v3.0.1? Please pick a preset: Manually select features? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)❯◉ Babel ◯ TypeScript ◯ Progressive Web App (PWA) Support ◯ Router ◯ Vuex ◯ CSS Pre-processors ◉ Linter / Formatter ◯ Unit Testing ◯ E2E Testing 这里我们可以选择我们需要的配置选项，选择完成后回车进入下一步。 12345Vue CLI v3.0.1? Please pick a preset: Manually select features? Check the features needed for your project: Babel, Router, CSS Pre-processors? Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n) 上面我选择添加了 Router 所以这里会问我需不需要使用 history 模式，选择是然后进行下一步，在这里需要注意的是当最后一步的时候会提示你要不要保存该配置为模板，选择是后自定义一个名字，以后就可以使用这一套配置为默认模板快速创建项目了，就是我前面的第一条默认配置选项。 如下： 12345678910Vue CLI v3.0.1? Please pick a preset: Manually select features? Check the features needed for your project: Babel, Router, CSS Pre-processors? Use history mode for router? (Requires proper server setup for index fallback in production) Yes? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): SCSS/SASS? Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? In package.json? Save this as a preset for future projects? (y/N) 然后进入项目目录，启动项目就可以了。浏览器访问 hello-world，至此大功告成。 后面文章会讲解如何修改 Vue Cli 3 项目基础配置。 更多文章可查看 我的博客","path":"2018/10/01/Vue 学习笔记 (二) -- 使用 VueCli 3/","date":"10-01","excerpt":""},{"title":"Vue 学习笔记 (一) -- 初识 VueCli 3","text":"Vue 学习笔记 (一) – 初识 VueCli 3简介接触 Vue 已经有一段时间了，之前做项目都是套用自己之前配置好的项目模板，最近突发奇想想要再重新配置一下项目，然而。。。 123456zengqingdeMacBook-Pro:Vue zengqing$ vue init webpack hello-world Command vue init requires a global addon to be installed. Please run npm install -g @vue/cli-init and try again.zengqingdeMacBook-Pro:Vue zengqing$ 之前的 vue init 创建命令不能用了有木有，然后想到之前更新了一波脚手架，然后赶紧翻看一下 Vue Cli 官方文档 然后发现画风已经是变成这个样子的了 原来已经升级到了 3.xx 版本的了，那么我们就来学习一下 Vue Cli 3 的新东西吧。 新特性整理收集了一些 Vue Cli 3 的新特性，总结如下： 使用命令的变化 项目结构变化 项目配置选项的变化 支持更多新功能 以上纯属个人观点，仅供参考。 使用命令的变化该方面主要体现在创建项目上面，就像刚开始说的那样 vue init webpack hello-world 已经替换为 vue create hello-world。 官方文档上说 Vue CLI 2 是被 Vue CLI 3 覆盖的。如果你仍然需要使用旧版本的 vue init 功能还是可以实现的，只需要使用以下命令： 123npm install -g @vue/cli-init# `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同vue init webpack my-project 具体创建项目命令的介绍会放在下一篇文章再聊，此处仅做介绍 项目结构变化先上 2.x 版本项目结构 12345678910111213141516171819202122232425262728293031.├── README.md├── build│ ├── build-preview.js│ ├── build.js│ ├── check-versions.js│ ├── logo.png│ ├── utils.js│ ├── vue-loader.conf.js│ ├── webpack.base.conf.js│ ├── webpack.dev.conf.js│ ├── webpack.prev.conf.js│ └── webpack.prod.conf.js├── config│ ├── dev.env.js│ ├── index.js│ ├── preview.env.js│ └── prod.env.js├── index.html├── package-lock.json├── package.json├── src│ ├── App.vue│ ├── assets│ ├── components│ ├── main.js│ ├── router│ ├── style│ └── utils└── static └── background.mp3 下面是新版本脚手架生成的项目结构 123456789101112131415.├── README.md├── babel.config.js├── package-lock.json├── package.json├── public│ ├── favicon.ico│ └── index.html└── src ├── App.vue ├── assets ├── components ├── main.js ├── router.js └── views 可以看出新版本的脚手架工具生成的项目是极其的简洁了。 移除了配置文件目录，config 和 build 文件夹。 移除了 static 文件夹，新增 public 文件夹，并且 index.html 移动到 public 中。在 src 文件夹中新增了 views 文件夹，用于分类 视图组件 和 公共组件。 项目配置选项的变化想必大家都知道在 2.0 版本的时候，要修改项目配置可以在 build 和 config 目录下进行修改，然而在 3.0 中这两个文件夹都已经移除了，那么新版本的配置应该在哪里设置呢？其实也很简单，只需要在项目根目录下新建一个 vue.config.js 文件然后在里面写项目所需配置就可以了。 具体配置方法会在后续文章中给出 支持更多新功能在新版本的脚手架中创建项目的时候可以看到新增了对 TypeScript 与 PWA 的支持 更多文章可查看 我的博客","path":"2018/10/01/Vue 学习笔记 (一) -- 初识 VueCli 3/","date":"10-01","excerpt":""},{"title":"Android UI美化之 shape的使用及其属性总结","text":"Android UI美化之 shape的使用及其属性总结近期在整理项目的过程中突然发现项目中有好多未曾使用过的图片，经过对比UI设计图片并检查代码后发现在UI上的这些地方都是通过drawable 下面的资源文件设置的背景，于是便想起来整理一下关于此类UI美化的东西，若存在写的不好的地方还希望大家多多指导。 本系列预计共3部分，本文具体内容为 shape 的使用，由于另外两篇文章暂时未整理，此处便先列出文章标题，后期会对此添加链接： Android UI 美化之 shape 的使用 Android UI 美化之 selector 的使用 Android UI 美化之 layer-list 的使用 言归正传，相信大家在项目中都用过很多用 shape 定义的效果，大多是一些较为规则的图形，如圆形、矩形、实线虚线以及渐变色等样式，而这种地方如果要让美工再去做张图片的话未免有点小题大做的感觉，而且有时候还要考虑各种适配问题，所以这个时候使用我们的 shape 的话便再好不过了，下面便介绍一下关于 shape 的使用过程中出现的一些属性。 android:shape 此属性有以下4种类型可供选择 rectangle：矩形( 默认)，可以画出直角矩形、圆角矩形、弧形等 oval：椭圆形，用得比较多的是画正圆 line：线形，可以画实线或虚线 ring：环形，可以画环形边框或环形进度条 （注：只有当 android:shape 的值设置为 ring 时以下4种属性才会生效） android:innerRadius：内环半径 android:innerRadiusRatio：内环半径相对于环的宽度的比例，比如环的宽度为50,比例为2.5,那么内环半径为20 android:thickness：环的厚度 android:thicknessRatio：环的厚度相对于环的宽度的比例 android:useLevel 如果当做是LevelListDrawable使用时值为true，否则为false. 上面这些便是 shape 标签的一些属性了,接下来的话便是我们的重点部分了,那就是使用 shape 做一些形状的绘制,下面便简单介绍下使用shape 绘制形状时的一些标签及其属性 corners 定义圆角,其属性如下 android:radius：全部的圆角半径 android:topLeftRadius：左上角的圆角半径 android:topRightRadius：右上角的圆角半径 android:bottomLeftRadius：左下角的圆角半径 android:bottomRightRadius：右下角的圆角半径 在定义圆角的时候大家应该可以看出可以通过两种形式来进行设置,即:1234567&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;corners android:radius=&quot;15dp&quot;/&gt; &lt;solid android:color=&quot;#F00&quot;/&gt;&lt;/shape&gt; 与 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;corners android:bottomLeftRadius=&quot;15dp&quot; android:bottomRightRadius=&quot;15dp&quot; android:topLeftRadius=&quot;15dp&quot; android:topRightRadius=&quot;15dp&quot;/&gt; &lt;solid android:color=&quot;#F00&quot;/&gt;&lt;/shape&gt; 上面两种的效果相同 gradient 定义渐变,其属性如下 android:type：共有3中渐变类型，线性渐变(linear)（默认）/放射渐变(radial)/扫描式渐变(sweep) android:angle：渐变角度，必须为45的倍数，0为从左到右，90为从上到下 android:centerX：渐变中心X的相当位置，范围为0～1 android:centerY：渐变中心Y的相当位置，范围为0～1 android:startColor：渐变开始点的颜色 android:centerColor：渐变中间点的颜色，在开始与结束点之间 android:endColor：渐变结束点的颜色 android:gradientRadius：渐变的半径，只有当渐变类型为radial时才能使用 android:useLevel：使用LevelListDrawable时就要设置为true。设为false时才有渐变效果 代码如下123456789101112131415161718&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;corners android:radius=&quot;15dp&quot;/&gt; &lt;gradient android:type=&quot;sweep&quot; android:angle=&quot;90&quot; android:centerX=&quot;0.2&quot; android:centerY=&quot;0.2&quot; android:centerColor=&quot;@color/colorAccent&quot; android:startColor=&quot;@color/colorPrimary&quot; android:endColor=&quot;@color/colorPrimaryDark&quot;/&gt; &lt;stroke android:width=&quot;1dp&quot; android:color=&quot;@android:color/white&quot;/&gt;&lt;/shape&gt; solid 定义填充色 android:color：形状内部的填充色123456&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt; &lt;solid android:color=&quot;#F00&quot;/&gt;&lt;/shape&gt; stroke 定义描边 android:width：描边的宽度 android:color：描边的颜色 android:dashWidth：虚线的宽度，值为0时是实线 android:dashGap：虚线的间隔 12345678&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;line&quot;&gt; &lt;!--实线--&gt; &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@android:color/holo_purple&quot; /&gt;&lt;/shape&gt; 12345678910&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;line&quot;&gt; &lt;!--虚线--&gt; &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;@android:color/holo_purple&quot; android:dashWidth=&quot;10dp&quot; android:dashGap=&quot;5dp&quot; /&gt;&lt;/shape&gt; padding 定义形状内边距 android:left：左边内边距 android:top：上方内边距 android:right：右方内边距 android:bottom：下部内边距1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;line&quot;&gt; &lt;padding android:left=&quot;2dp&quot; android:top=&quot;1dp&quot; android:right=&quot;2dp&quot; android:bottom=&quot;1dp&quot; /&gt;&lt;/shape&gt; size 定义形状的大小 android:width：宽度 android:height：高度 123456789101112&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:shape=&quot;oval&quot; android:useLevel=&quot;false&quot; &gt; &lt;solid android:color=&quot;#F00&quot; /&gt; &lt;size android:width=&quot;15dp&quot; android:height=&quot;15dp&quot; /&gt;&lt;/shape&gt; 最后附上本文代码,敬请大神指导Android 的UI 美化方式","path":"2018/09/29/Android-UI美化之-shape的使用及其属性总结/","date":"09-29","excerpt":""},{"title":"Android 多包名打包应用","text":"Android 多包名打包应用简介：公司的新需求：同一份代码打出另一个包名的apk，即包名不同、名称不同的两个apk。 我经过多方渠道发现大致有一下三种方法： 通过ant打多包名应用 建立多个与“main”同级的文件夹，修改清单文件及build.gradle以达到打多包名效果 通过修改build.gradle文件的applicationId达到打多包名的效果，原理与第二种方法但比较简单 因为是新手，对ant并不太了解，原理也不太清楚，为了赶时间所以直接选择了第二种与第三种方法，经过测试发现第三种方法要更加简单的多，所以最后直接使用了第三种方法，以下为详解。 因为要修改的是build.gradle文件而该文件一经修改就要重新编译，用过史丢丢的童鞋应该都清楚等待编译完成是是件多么蛋疼的事情所以建议大家一次性修改完成以便节约开发时间。 上面已经说过该方法主要是通过修改build.gradle文件的applicationId达到打多包名的效果的，下面便粘出本人代码供大家参考。 1234567891011121314151617181920productFlavors &#123; app_one &#123; applicationId &quot;com.example.app1&quot; manifestPlaceholders = [ app_name:&quot;测试-1&quot; ] &#125; app_two &#123; applicationId &quot;com.example.app2&quot; manifestPlaceholders = [ app_name:&quot;测试-2&quot; ] &#125; app_three &#123; applicationId &quot;com.example.app3&quot; manifestPlaceholders = [ app_name:&quot;测试-3&quot; ] &#125; &#125; 是不是感觉这个方法很眼熟？没错就是多渠道打包的地方，通过添加这段代码后需要用到gradle面板进行打包，得到app_one 通过查看包名发现它的包名为 com.example.app1 显示的名称也为 测试-1，app_two 与 app_three 效果等同，至此已经完成多包名打包，且通过同一份代码打出了不同包名、不同名称的三个应用，而需求也达到了。 可能有的朋友会问如果还需要其他的渠道包怎么办，如果有10的渠道而又要打包两个不同的应用那岂不是要写20个类似于app_one的东西，那不是要很麻烦？没错我正好也碰到了这种情况，经过多次研究测试发现并没有那么麻烦，只需设定一个默认的包名、应用名即可，废话不多说，直接贴代码。 123456789101112131415161718192021222324252627282930defaultConfig &#123; if (PACKAGE == &quot;one&quot;) &#123; applicationId &quot;com.example.app1&quot; manifestPlaceholders = [ app_name:&quot;测试-1&quot; ] &#125; else &#123; applicationId &quot;com.example.app2&quot; manifestPlaceholders = [ app_name:&quot;测试-2&quot; ] &#125; minSdkVersion 14 targetSdkVersion 23 versionCode 1 versionName &quot;1.0&quot; &#125; buildTypes &#123; release &#123; minifyEnabled false proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos; &#125; &#125; productFlavors &#123; app_one &#123;&#125; app_two &#123;&#125; app_three &#123;&#125; &#125; 嗯，就是这样，在defaultConfig里面设置一个默认的包名与应用名就可以了。 好了，到了这一步我们就要用到另一个神奇的文件了 看看你的工程根目录下得这个东西，没错就是它，这里我设置了一个字段“PACKAGE”，即告诉Studio我想要什么包，到这里相信大家也就明白我写的判断的目的了。1PACKAGE=one 只要通过修改这一字段为“one”，然后通过打包后就可以得到三个“测试-1”的app_one、app_two、app_three的apk文件了，同理将其修改为其他字段即可打出其他包名、应用名的应用了。但是转到本人公司项目后发现这种方法竟然失灵了，即修改 properties 文件内的字段后得不到我想要的包，经过探索发现可能是与项目工程的大小有关，改完重启后就可以了。当然还有另一个最重要的地方 1234567891011121314151617181920&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.example.morepackagenametest&quot;&gt; &lt;application android:allowBackup=&quot;true&quot; android:icon=&quot;@mipmap/ic_launcher&quot; android:label=&quot;$&#123;app_name&#125;&quot; android:supportsRtl=&quot;true&quot; android:theme=&quot;@style/AppTheme&quot;&gt; &lt;activity android:name=&quot;.MainActivity&quot;&gt; &lt;intent-filter&gt; &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt; &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt; &lt;/intent-filter&gt; &lt;/activity&gt; &lt;/application&gt;&lt;/manifest&gt; 就是这里了，即之前定义的名字赋给应用了，在这里大家要注意一下在该项目的其他 model 内的清单文件里最好不要写 android：label 这句了，否则会报错的，至于是什么错一眼就可以看到了，当然如果报错了有两个方法： 删掉其他 model 内清单文件下application的 label 属性 通过在 application 下添加 tools:replace=&quot;android:label&quot; 属性解决 好了，打完收工。期待大神的批评指导。 最后附上资源下载地址 Android 多包名打包应用 供各位参考","path":"2018/09/29/Android-多包名打包应用/","date":"09-29","excerpt":""},{"title":"Atom 完美支持WePY","text":"Atom-完美支持WePY简介为何使用WePY？我们都知道开发小程序的时候有很多很多的不方便的地方，譬如： 小程序的组件化支持能力太弱 小程序无法使用npm包,无法使用第三方组件 频繁调用setData及setData过程中页面跳闪 request并发次数限制 创建一个页面需要管理4个对应的文件等… ps.如果你还不了解如何开发小程序，可以先看下小程序开发简易教程。 综上，便产生了一种框架WePY,详见WePY 官方文档。 开发工具WePY官方推荐的编辑器有 Sublime WebStorm/PhpStorm Atom VS Code VIM 摸索了一圈还是推荐Atom给大家使用，感觉对WePY支持要比其他几款编辑器更高。 Atom 插件既然选择了Atom，那么一些必备的插件还是需要的，这里呢就为大家精心准备了几款实用插件（主要适配于WePY）。 atom-beautify代码格式化工具，可以设置在保存时自动格式化，别提有多方便了。支持html，css，javascript，java，go等等，反正常见的语言基本都支持了。 atom-wrap-in-tag自动修改对应的HTML关闭标签，挺实用的。 autocomplete-paths自动补全文件路径，这个功能肯定使用嘛，完全避免了路径输入错误带来的bug。 autoclose-html自动输入对应的HTML关闭标签，虽然简答但是实用。 docblockr文档化注释，你懂的，团队协作规范注释必备插件。 double-tag能让同时编辑html的开始与结束标记，如果你增加一个 HTML开始语法，它会自动跟随写出结束语法，比如键入&lt;div&gt;开始，自动有&lt;/div&gt;结束语法。 emmet能够基于Emmet语法产生HTML。 language-vue使编辑器支持Vue语法，代码高亮 file-icons很简单，为不同类型的文件添加一个漂亮的小图标，颜控开发者必备。 linter能够自动覆盖检查源码，产生警告和错误，帮助规范编程，基于实时代码分析。HTML, CSS, SCSS, JavaScript都有各自的Linter。甚至框架也有自己的Linter。 linter-jshint帮助你编写专业的js代码，js开发者必备插件。 minimap这个插件不用介绍了吧，从sublime开始，一直使用。从未遗忘。 activate-power-mode这个插件就不用说了，酷炫的敲代码，装*党必备。 安装完这些插件，你的Atom已经可以很愉快的支持WePY了，快去尝试吧。","path":"2018/09/29/Atom-完美支持WePY/","date":"09-29","excerpt":""},{"title":"Atom 插件安装慢解决方案","text":"Atom 插件安装慢解决方案对于一名前端开发者来说 Atom 确实是一个很不错的编辑器，使用方便、功能强大而且编写代码酷炫。对于 Atom 来说我感觉最重要的一个能就是插件(或者说package)，你可以在这里 找到很多功能强大的插件，但是在国内，Atom插件安装总是有点不稳定，下载缓慢、或者下载失败，此时你就也要尝试其他的一些方法来安装你想要的插件了。 此文以 atom-beautify 插件为例,可换为你想安装的插件 apm 安装apm (Atom Package Manager) 是 Atom 的包管理工具，可以方便的管理 Atom 的插件。首先打开你的 cmd ,切换到 Atom 的插件目录。 Atom 的插件目录为 C:\\Users\\zengqing\\.atom\\packages 注：此处 zengqing 更换为你的电脑用户名 然后运行代码： 1apm install atom-beautify 然后静等片刻待出现 done 即表示安装成功,随后就可以打开 Atom 使用此插件了 git 安装使用此方式你就需要先在 Atom 插件 找到你需要的插件仓库地址如：https://github.com/Glavin001/atom-beautify 为 atom-beautify 的仓库地址，然后使用r如下命令： 1git clone https://github.com/Glavin001/atom-beautify 克隆完毕后： 12cd atom-beautifynpm install 命令完成后即可打开 Atom 使用插件了。 注： 此方法也许进入 Atom 的插件目录 设置代理此处官方亦有声明，点击查看 切换国内源切换到 Atom 安装目录下（C:\\Users\\zengqing\\.atom），编辑 .atomrc 文件。将该文件内容改为： 1registry = https://registry.npm.taobao.org 保存文件后可通过 apm install --check 命令测试是否可以正常安装，然后就可以去 Atom里正常安装了 注：是 Atom 安装目录，不是插件目录；如果 Atom 安装目录下没有 .atomrc 文件就新建一个","path":"2018/09/29/Atom-插件安装慢解决方案/","date":"09-29","excerpt":""}]}